#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
        <&zip_xy_scaler 8 4>,
        <&zip_temp_layer MOUSE_R_LAYER 300>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 24>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 300>;

    lowspeedmode {
        layers = <TERTIARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 32>;
    };
};

&mt { quick-tap-ms = <200>; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tap_dance_layer_1and2: tap_dance_layer_1and2 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mo12";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CONBO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        COMBO_TAB {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        combo_semi_colon {
            bindings = <&none>;
            key-positions = <15 16>;
        };

        combo_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 17>;
        };

        combo_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
        };

        combo_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <13 14>;
        };

        l_disp {
            bindings = <&kp LA(LC(D))>;
            key-positions = <20 21>;
        };

        center_disp {
            bindings = <&kp LA(LC(F))>;
            key-positions = <21 22>;
        };

        right_disp {
            bindings = <&kp LA(LC(G))>;
            key-positions = <22 23>;
        };

        full_disp {
            bindings = <&kp LA(LC(ENTER))>;
            key-positions = <23 24>;
        };

        l_com {
            bindings = <&kp LEFT_WIN>;
            key-positions = <30 31>;
        };
    };

    macros {
        MACRO_LTAP: MACRO_LTAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>;
            label = "MACRO_LTAP";
        };

        mission: mission {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(UP_ARROW)>, <&macro_press>;

            label = "MISSION";
        };

        launchpad: launchpad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(L))>;
            label = "LAUNCHPAD";
        };

        capture: capture {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(N5))>, <&macro_press>;

            label = "CAPTURE";
        };

        spot_app: spot_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(SPACE)>;
            label = "SPOT_APP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&scroll_up_down>;

            bindings = <
&kp Q             &kp W              &kp E  &kp R        &kp T            &kp Y                       &kp U        &kp I      &kp O              &kp P
&kp A             &kp S              &kp D  &kp F        &kp G            &kp H                       &kp J        &kp K      &kp L              &mt2 EQUAL MINUS
&mt LEFT_SHIFT Z  &kp X              &kp C  &kp V        &kp B            &kp N                       &kp M        &kp COMMA  &kp PERIOD         &mt RSHIFT SLASH
&kp TAB           &mt LEFT_ALT SEMI         &lt 2 SPACE  &lt 1 BACKSPACE  &mt RIGHT_COMMAND CAPSLOCK  &lt 1 ENTER             &kp DOUBLE_QUOTES  &kp EQUAL
            >;
        };

        SECONDARY_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&trans  &kp N7        &kp N8        &kp N9        &kp PLUS      &kp SINGLE_QUOTE  &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp NON_US_BACKSLASH
&trans  &kp N0                      &trans        &trans        &kp DELETE        &trans                             &kp DOUBLE_QUOTES     &kp PIPE
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&kp ESCAPE            &kp LS(LC(TAB))         &kp UP_ARROW  &kp LC(TAB)        &trans  &kp PAGE_UP    &kp HOME  &kp UP_ARROW  &kp END    &kp RS(RG(RC(NUMBER_3)))
&kp CARET             &kp LEFT_ARROW          &kp DOWN      &kp RIGHT          &trans  &kp PAGE_DOWN  &kp LEFT  &kp DOWN      &kp RIGHT  &none
&mt LEFT_SHIFT TILDE  &kp LS(LG(LEFT_ARROW))  &trans        &kp LS(LG(RIGHT))  &trans  &kp BACKSLASH  &mkp MB4  &none         &mkp MB5   &kp RIGHT_SHIFT
&trans                &trans                                &trans             &trans  &trans         &trans                  &trans     &trans
            >;

            sensor-bindings = <&volume_up_down>, <&volume_up_down>;
        };

        system_layer {
            display-name = "system_layer";
            sensor-bindings = <&volume_up_down>, <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans  &trans  &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &bt BT_CLR    &bt BT_CLR_ALL  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans          &trans
&trans  &trans          &trans  &trans  &trans        &trans                      &trans          &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &mo 5      &trans     &trans
&trans  &trans  &trans  &trans  &trans  &capture  &MACRO_LTAP  &mkp LCLK  &mkp RCLK  &mo 5
&trans  &trans  &trans  &trans  &trans  &trans    &mission     &spot_app  &mkp MB5   &trans
&trans  &trans          &trans  &trans  &trans    &trans                  &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans       &mkp MCLK  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&mo 7   &MACRO_LTAP  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mkp MB4     &trans     &mkp MB5   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                  &trans     &trans  &trans  &trans          &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System_layer {
            if-layers = <2 3>;
            then-layer = <3>;
        };
    };
};
